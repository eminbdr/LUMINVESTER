tags$style(HTML("body {
}.well{padding:5px}
.shiny-input-container {margin:1px;padding:0px;
}.col-sm-6 {padding:0px;margin:0px}"))
),
titlePanel(lang$Ex_Nu),
sidebarLayout(
sidebarPanel(
width = 3,
column(
width = 6,
radioButtons(
"option_num",
lang$slctns,
choices = c(1, 2),
selected = "1",
inline = TRUE
)
),
column(
width = 6,
numericInput(
"digit",
lang$Si_Fi,
min = -3,
max = 10,
value = 3
)
),
selectInput("first_sector", lang$fi_se, choices = sector),
selectInput("first_pro",  lang$fi_pr, choices = province),
conditionalPanel(
condition = "input.option_num == 2",
selectInput("second_sector", lang$se_pr, choices = sector),
selectInput("second_pro", lang$se_se, choices = province, selected = province[2])
),
conditionalPanel(condition = "input.option_num == 1",
numericInput("comp_mean", lang$mean_comp, value = 0)),
radioButtons(
"wroller",
h3(lang$mov_avg),
choiceNames = c(lang$mov_none,lang$mov_mean,lang$mov_med,lang$mov_max),
choiceValues = c(0,"roll_mean","roll_med","roll_max"),
selected = "0"
),
uiOutput("k_input"),
selectInput("lang",lang$lang_selec, choices = avaiable_languages)
),
mainPanel(fluidRow(
plotOutput("distPlot"),
verbatimTextOutput("calculations"),
p(lang$main_desc),
))
))}
analysisUi <- {fluidPage(
tags$head(
tags$style(HTML("body {
}.well{padding:5px}
.shiny-input-container {margin:1px;padding:0px;
}.col-sm-6 {padding:0px;margin:0px}"))
),
titlePanel(lang$Ex_Nu),
sidebarLayout(
sidebarPanel(
width = 3,
column(
width = 6,
radioButtons(
"option_num",
lang$slctns,
choices = c(1, 2),
selected = "1",
inline = TRUE
)
),
column(
width = 6,
numericInput(
"digit",
lang$Si_Fi,
min = -3,
max = 10,
value = 3
)
),
selectInput("first_sector", lang$fi_se, choices = sector),
selectInput("first_pro",  lang$fi_pr, choices = province),
conditionalPanel(
condition = "input.option_num == 2",
selectInput("second_sector", lang$se_pr, choices = sector),
selectInput("second_pro", lang$se_se, choices = province, selected = province[2])
),
conditionalPanel(condition = "input.option_num == 1",
numericInput("comp_mean", lang$mean_comp, value = 0)),
radioButtons(
"wroller",
h3(lang$mov_avg),
choiceNames = c(lang$mov_none,lang$mov_mean,lang$mov_med,lang$mov_max),
choiceValues = c(0,"roll_mean","roll_med","roll_max"),
selected = "0"
),
uiOutput("k_input"),
selectInput("lang",lang$lang_selec, choices = avaiable_languages),
),
mainPanel(fluidRow(
plotOutput("distPlot"),
verbatimTextOutput("calculations"),
p(lang$main_desc),
))
))}
available_langs
available_langs.cols
available_langs.col
colnames(available_langs)
available_langs
names(available_langs)
runApp()
names(available_langs)
c(names(available_langs))
runApp()
runApp()
runApp()
available_langs
sector
c(available_langs)
c(names(available_langs))
runApp()
province
lang
lang
is.null(lang)
is.na(lang)
is.na(lang)
is.na(lang)
is.na(names(lang))
lang <- fromJSON(file = "lang.json")[available_langs["English"]]
lang <- fromJSON(file = "lang.json")[available_langs["English"]]
is.na(names(lang))
lang <- fromJSON(file = "lang.json")[available_langs["English"]]
is.na(names(lang))
is.na(lang)
lang
lang
[available_langs["English"]]
fromJSON(file = "lang.json")[available_langs["English"]]
fromJSON(file = "lang.json")[[available_langs["English"]]]
available_langs["English"]
available_langs["English"][1]
available_langs["English"][2]
available_langs["English"][1]
lang <- fromJSON(file = "lang.json")[[available_langs["English"]]]
available_langs<-c("Türkçe" = "tr","English"="en")
lang <- fromJSON(file = "lang.json")[[available_langs["English"]]]
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang<-data[[available_langs["English"]]]
langs <- fromJSON(file = "lang.json")
lang<-data[[available_langs["English"]]]
library(jsonlite)
lang<-data[[available_langs["English"]]]
langs <- fromJSON(file = "lang.json")
lang<-data[[available_langs["English"]]]
available_langs <- c("Türkçe" = "tr", "English" = "en")
# Load the JSON data (replace "lang.json" with the actual path to your JSON file)
data <- fromJSON(file = "lang.json")
# Load the JSON data (replace "lang.json" with the actual path to your JSON file)
data <- fromJSON(file = "lang")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny.i18n)
install.packages(shiny.i18n)
install.packages(i18n)
install.packages(i18n)
install.packages("shiny.i18n")
install.packages("shiny.i18n")
i18n_init(translation_file = "translations.json")
library(shiny.i18n)
lang <- i18n_init(translation_file = "translations.json")
shiny.i18n::i18n_init(translation_file = "translations.json")
View(langs)
runApp()
runApp()
runApp()
lang <- reactiveVal(fromJSON(paste(readLines("en.json", warn = FALSE), collapse = "")))
lang
lang[1]
lang
lang[1]
lang["ur"]
lang <- reactiveValues(fromJSON(paste(readLines("en.json", warn = FALSE), collapse = "")))
reactiveValues("lang" =fromJSON(paste(readLines("en.json", warn = FALSE), collapse = "")))
reactiveValuesToList()
lang
lang <- fromJSON(paste(readLines("en.json", warn = FALSE), collapse = ""))
lang
lang
lang
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("rjson")
runApp()
install.pacga
install.packages("ggplot2")
runApp()
install.packages("tseries")
runApp()
install.packages("ggpubr")
runApp()
shiny::runApp()
install.packages("ggpubr")
install.packages("ggpubr")
runApp()
library(tibble)
detach("package:tibble", unload = TRUE)
library()
read.csv("dataset.csv")
invest <- read.csv("dataset.csv")
first_row
first_row <- data.frame(invest)
first_row
invest <- read.csv("dataset.csv",sep = ";")
first_row <- data.frame(invest)
first_row
invest<- data.frame(invest)
first_row <- invest["Çelik"]
first_row <- invest[,"Çelik"]
colnames(invest)
subset(invest)
invest["Çelik",]
invest["Çelik","ADANA",]
invest["Çelik"+"ADANA"]
subset(invest, sector = "Çelik" & province = "Adana")
subset(invest, sector = "Çelik" | province = "Adana")
subset(invest, "sector" = "Çelik" | "province" = "Adana")
colnames(invest)
subset(invest, sector == "Çelik" & province == "Adana")
subset(invest, sector == "Çelik" & province == "ADANA")
invest
subset(invest, sector == "Çelik" & province == "ADANA")
rownames(subset)
rownames(invest)
subset(invest, invest$sector == "Çelik" & invest$province == "ADANA")
invest <- read.csv("dataset.csv",sep = ";", encoding='utf-8')
invest<- data.frame(invest)
subset(invest, invest$sector == "Çelik" & invest$province == "ADANA")
invest
invest <- read.csv("dataset.csv",sep = ";", encoding='utf-8')
subset(invest, invest$sector == "Çelik" & invest$province == "ADANA")
invest <- read.csv("dataset.csv",sep = ";", encoding='utf-8')
subset(invest, invest$sector == "Çelik" & invest$province == "ADANA")
invest <- read.csv("dataset.csv",sep = ";", encoding='utf-8')
sectors <- invest$sector
sectors
provinces <- unique(invest$province)
sectors[1]
subset(invest, sector == sectors[1] & province == provinces[1])
c(subset(invest, sector == sectors[1] & province == provinces[1]))
c(subset(invest, sector == sectors[1] & province == provinces[1])[1,])
c(subset(invest, sector == sectors[1] & province == provinces[1])[,1])
c(subset(invest, sector == sectors[1] & province == provinces[1])[,,])
first_row <- c(subset(invest, sector == sectors[1] & province == provinces[1]))
names(first_row) <- NULL
first_row
c(first)
c(first_row)
array(first_row)
class(first_row)
first_row <- as.character(subset(invest, sector == sectors[1] & province == provinces[1]))
names(first_row) <- NULL
first_row
first_row <- as.character(subset(invest, sector == sectors[1] & province == provinces[1])[2:])
names(first_row) <- NULL
first_row <- as.character(subset(invest, sector == sectors[1] & province == provinces[1])[2:,])
first_row <- as.character(subset(invest, sector == sectors[1] & province == provinces[1]))
first_row <- as.character(subset(invest, sector == sectors[1] & province == provinces[1])[3:length(colnames(invest))])
names(first_row) <- NULL
first_row
integer(first_row)
double(first_row)
subset(invest, sector == sectors[1] & province == provinces[1])[3:length(colnames(invest))]
first_row <- as.vector(subset(invest, sector == sectors[1] & province == provinces[1])[3:length(colnames(invest))])
names(first_row) <- NULL
first_row
first_row <- as.character.numeric_version(subset(invest, sector == sectors[1] & province == provinces[1])[3:length(colnames(invest))])
names(first_row) <- NULL
first_row
first_row <- as.character(subset(invest, sector == sectors[1] & province == provinces[1])[3:length(colnames(invest))])
names(first_row) <- NULL
sapply(first_row, double)
sapply(first_row, as.double)
first_row
sapply(first_row, as.double)
apply(first_row, as.double)
lapply(first_row, as.double)
as.character(lapply(first_row, as.double)
)
first_row[1]
first_row[1]+ first_row[2]
as.numeric(first_row)
first_row<- as.numeric(first_row)
library(tseries)
install.packages("tseries")
install.packages("tseries")
library(tseries)
library(tseries)
acf(first_row)
acf(first_row,pl=FALSE)
ggplot(first_row) + ggscatter()
ggplot(data.frame(first_row)) + ggscatter()
data.frame(first_row)
ggplot(data.frame(first_row)) + ggscatter()
ggplot(data.frame(first_row)) + ggscatter(y=first_row)
ggplot(data.frame(first_row)) + ggscatter(x=1:length(first_row),y=first_row)
ggplot(data.frame(first_row)) + geom_line(x=1:length(first_row),y=first_row)
plot(x=1:length(first_row),first_row)
shiny::runApp()
df <- read.csv(local_path, sep = ";", encoding = "utf-8")
df
df <- read.csv(local_path, sep = ";", encoding = "utf8")
df
df <- read.csv(local_path, sep = ";")
df
df <- read.csv(local_path, sep = ";",encoding = "utf-8")
df
colnames(df)[3:length(df)] <- gsub("\\.", "-", gsub("X", "", colnames(df)[3:length(df)]))
sector <- unique(df[["sector"]])
province <- unique(df[["province"]])
years <- as.Date(paste(colnames(df)[3:length(df)],"-01",sep=""),format = "%Y-%m-%d")
lang <- fromJSON(paste(readLines("en.json", warn = FALSE), collapse = ""))
df
df <- read.csv(local_path, sep = ";",encoding = "utf-8",dec = "utf-8")
print(read.csv)
read.csv
library(qtl2)
update()
install.packages(c("GGally", "MatrixModels", "PEIP", "RPMG", "RSEIS", "RSQLite", "Rcpp", "RcppArmadillo", "RcppEigen", "RgoogleMaps", "SnowballC", "TTR", "askpass", "brio", "broom", "bslib", "cachem", "checkmate", "cli", "cpp11", "crosstalk", "curl", "data.table", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "e1071", "evaluate", "expm", "fansi", "fastDummies", "fields", "fontawesome", "forecast", "fs", "gargle", "gert", "ggplot2", "ggrepel", "ggthemes", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "labeling", "later", "leaflet", "leaflet.providers", "lifecycle", "lme4", "lubridate", "maps", "markdown", "minqa", "mvtnorm", "openssl", "packrat", "pkgbuild", "pkgload", "plotly", "plyr", "pracma", "prettyunits", "processx", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "raster", "readxl", "rematch", "renv", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "rworldmap", "sass", "scales", "shiny", "shinyWidgets", "shinytoastr", "sp", "spam", "spsComps", "stringi", "stringr", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "tidytable", "tinytex", "tseries", "tzdb", "utf8", "uuid", "viridis", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "yaml"))
install.packages(c("RSQLite", "Rcpp", "RcppArmadillo", "brio", "cachem", "checkmate", "cli", "curl", "data.table", "digest", "dplyr", "e1071", "fansi", "gert", "ggthemes", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "later", "processx", "promises", "purrr", "ragg", "sass", "shiny", "stringi", "svglite", "systemfonts", "textshaping", "tseries", "utf8", "vroom", "xml2", "yaml"))
install.packages(c("RSQLite", "Rcpp", "RcppArmadillo", "brio", "cachem", "checkmate", "cli", "curl", "data.table", "digest", "dplyr", "e1071", "fansi", "gert", "ggthemes", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "later", "processx", "promises", "purrr", "ragg", "sass", "shiny", "stringi", "svglite", "systemfonts", "textshaping", "tseries", "utf8", "vroom", "xml2", "yaml"))
install.packages(c("RSQLite", "Rcpp", "RcppArmadillo", "brio", "cachem", "checkmate", "cli", "curl", "data.table", "digest", "dplyr", "e1071", "fansi", "gert", "ggthemes", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "later", "processx", "promises", "purrr", "ragg", "sass", "shiny", "stringi", "svglite", "systemfonts", "textshaping", "tseries", "utf8", "vroom", "xml2", "yaml"))
read.csv
local_path <- "dataset.csv"
df <- read.csv(local_path, sep = ";",encoding = "utf-8")
df
install.packages(c("brio", "cachem", "checkmate", "cli", "curl", "data.table", "digest", "dplyr", "e1071", "fansi", "gert", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "later", "processx", "promises", "purrr", "ragg", "Rcpp", "RcppArmadillo", "RSQLite", "sass", "stringi", "svglite", "tseries", "utf8", "vroom", "xml2", "yaml"))
install.packages(c("brio", "cachem", "checkmate", "cli", "curl", "data.table", "digest", "dplyr", "e1071", "fansi", "gert", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "later", "processx", "promises", "purrr", "ragg", "Rcpp", "RcppArmadillo", "RSQLite", "sass", "stringi", "svglite", "tseries", "utf8", "vroom", "xml2", "yaml"))
install.packages(c("RSQLite", "Rcpp", "RcppArmadillo", "brio", "cachem", "checkmate", "cli", "curl", "data.table", "digest", "dplyr", "e1071", "fansi", "gert", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "later", "processx", "promises", "purrr", "ragg", "sass", "stringi", "svglite", "tseries", "utf8", "vroom", "xml2", "yaml"))
df <- qtl2::read.csv(local_path, sep = ";",encoding = "utf-8")
df <- read.csv2(local_path, sep = ";",encoding = "utf-8")
df
df <- read.table(local_path, sep = ";",encoding = "utf-8")
df
df <- read.table(local_path, sep = ";")
df
df <- read.table(local_path, sep = ";",encoding = "utf-8-BOM")
df
df <- read.table(local_path, sep = ";",fileEncoding = "UTF-8-BOM")
df <- read.table(local_path, sep = ";",encoding = "UTF-8-BOM")
df
df <- read.table(local_path, sep = ";",encoding = "UTF-8")
df
df <- read.table(local_path, sep = ";",encoding = "utf-8")
df
df <- read.table(local_path, sep = ";",encoding = "UTF-8")
df
df <- read.csv(local_path, sep = ";",encoding = "UTF-8")
df
df <-readr
library(readr)
df <-readr
readr
library(readr)
readr
df <-readr::read.csv(local_path,encoding = "utf-8")
df <-read.csv(local_path,encoding = "utf-8")
df
df <-read.csv(local_path,encoding = "utf-8",sep = "&")
df
df <-read.csv(local_path,encoding = enc2utf8,sep = ";")
df <-read.csv(local_path,encoding = enc2utf8(),sep = ";")
df <-read.csv(local_path,encoding ="utf-32",sep = ";")
df
head(df)
df <-read.csv(local_path,encoding ="utf-16",sep = ";")
head(df)
df <-read.csv(local_path,encoding ="ISO-8859-1",sep = ";")
head(df)
df <-read.csv(local_path,encoding ="LATIN 1",sep = ";")
head(df)
df <-read.csv(local_path,sep = ";")
head(df)
df <-read.csv(local_path,sep = ";",encoding = "windows1254")
head(df)
df <-read.csv(local_path,sep = ";",encoding = "iso88599")
head(df)
df <-read.csv(local_path,sep = ";",encoding = "utf-8")
head(df)
df <-read.csv(local_path,sep = ";",encoding = "utf8bom")
df
df <-read.csv(local_path,sep = ";",encoding = "utf")
head(df)
df <-read.csv(local_path,sep = ";",encoding = "UTF-8")
head(df)
-library(stringi)
library(stringi)
local_path <- "dataset.csv"
df <- read.csv(stri_read_lines(local_path, skip_nul = TRUE), sep = ";")
df <- read.csv(stri_read_lines(local_path), sep = ";")
df <- read.csv(stri_read_lines(local_path,"rt"), sep = ";")
local_path <- "dataset.csv"
df <- read.csv(stri_read_lines(local_path,"rt"), sep = ";")
local_path <- "dataset.csv"
df <- read.csv(stri_read_lines(local_path,"rt"), sep = ";")
df <- stri_read_lines(local_path,"rt"), sep = ";")
df <- stri_read_lines(local_path,"rt")
local_path <- "dataset.csv"
df <- stri_read_lines(local_path,"utf-8")
df
df <-read.csv( stri_read_lines(local_path,"utf-8"),sep=";")
df <-read.csv( stri_read_raw(local_path,"utf-8"),sep=";")
head
head(df)
colnames(df)[3:length(df)] <- gsub("\\.", "-", gsub("X", "", colnames(df)[3:length(df)]))
shiny::runApp()
runApp()
runApp()
library(shinydashboard)
library(shinyWidgets)
source("functions.R")
source("server.R")
source("ui.R")
runApp()
runApp()
library(shinydashboard)
library(shinyWidgets)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
version()
version
install.packages("installr")
library(installr)
updateR()
version
shiny::runApp()
install.packages("rjson")
install.packages("stringi")
available.packages()
installed.packages()
runApp()
paste("dsasds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("dsasds")
runApp()
runApp()
runApp()
local_path <- "dataset.csv"
df <-read.csv( stri_read_raw(local_path,"utf-8"),sep=";")
df <-read.csv(as.character(stri_read_raw(local_path,"utf-8")),sep=";")
df
df <-read.csv(as.character(stri_read_raw(local_path,"utf-8")),sep=";")
df <-read.csv(stri_read_raw(local_path,"utf-8"),sep=";")
colnames(df)[3:length(df)] <- gsub("\\.", "-", gsub("X", "", colnames(df)[3:length(df)]))
df <-read.csv(stri_read_raw(local_path,"utf-8"),sep=";")
stri_read_raw(local_path,"utf-8")
library(stringi)
stri_read_lines(local_path,"utf-8")
df <-read.csv(stri_read_lines(local_path,encoding = "utf-8"),sep=";")
stri_read_lines(local_path,encoding = "utf-8")
stri_read_lines(local_path,encoding = "utf-8")
shiny::runApp()
stri_read_lines(local_path,encoding = "utf-8")
stri_read_lines(local_path,encoding = "utf8")
stri_read_lines(local_path,encoding = "utf8")
stri_read_lines(local_path)
runApp()
library(stringi)
stri_read_lines(local_path,encoding = "UTF-8")
local_path <- "clean1.csv"
stri_read_lines(local_path,encoding = "UTF-8")
stri_read_lines(local_path,encoding =stri_enc_toutf8)
df <-read.csv(stri_read_lines(local_path),sep=";")
stri_read_raw(local_path)
stri_read_lines(stri_read_raw(local_path),encoding = "UTF-8")
df <-read.csv(local_path,encoding = "utf/8",sep=";")
df <-read.csv(local_path,encoding = "utf-8",sep=";")
runApp()
shiny::runApp()
