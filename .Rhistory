}
data_getter <- function(url) {
headers <- c(
"accept" = "*/*",
"accept-language" = "de,en-US;q=0.9,en-GB;q=0.8,en;q=0.7",
"sec-ch-ua" = "\"Not/A)Brand\";v=\"99\", \"Opera\";v=\"101\", \"Chromium\";v=\"115\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "no-cors",
"sec-fetch-site" = "cross-site"
)
response <- httr::GET(url, headers = headers)
excel_data <- httr::content(response, as = "raw")
return(read_excel(readr::read_bin(excel_data, skip = 0, n = -1)))
}
data_prep <- function(url) {
name <- sub("\\?.*", "", tail(strsplit(url, "/", fixed = TRUE)[[1]], n = 1))
return(cleaner(data_getter(url), name))
}
merger <- function(dataset, to_merge) {
dataset <- read.csv(dataset, sep = ";", encoding = "UTF-8")
merged_df <- dataset
for (i in 1:length(to_merge)) {
if (all(to_merge[[i]]$sector %in% dataset$sector)) {
merged_df <- merge(merged_df, to_merge[[i]], by = c("sector", "province"), all.x = TRUE)
} else {
cat("Sectors don't match\n")
}
}
columns_to_delete <- grep("(x|y)", names(merged_df), ignore.case = TRUE, value = TRUE)
merged_df <- merged_df[, !(names(merged_df) %in% columns_to_delete)]
merged_df[is.na(merged_df)] <- 0
dat_sec <- merged_df %>%
group_by(sector) %>%
summarise_if(is.numeric, sum) %>%
mutate(province = "TOPLAM")
dat_pro <- merged_df %>%
group_by(province) %>%
summarise_if(is.numeric, sum) %>%
mutate(sector = "TOPLAM")
dat_sec <- bind_rows(dat_sec, dat_pro)
merged_df <- merged_df %>%
select(-c(sector, province)) %>%
distinct() %>%
left_join(dat_sec, by = c("sector", "province")) %>%
relocate(sector, province, .before = 1)
write.csv(merged_df, "clean1.csv", row.names = FALSE, sep = ";", fileEncoding = "UTF-8")
}
urls <- c(
"https://tim.org.tr/files/downloads/rakamlar/2023/7/2023-07-iller-bazinda-sektor-rakamlari.xlsx?v=2",
"https://tim.org.tr/files/downloads/rakamlar/2023/6/2023-06-iller-bazinda-sektor-rakamlari.xlsx?v=2"
)
data_list <- lapply(urls, data_prep)
library(dplyr)
library(lubridate)
library(readxl)
cleaner <- function(df, filename) {
# Extract the desired columns
selected_columns <- c(1, 2, 6, 7, 9)
df <- df[, selected_columns]
df <- df[-c(1:3), ]
date_parts <- strsplit(filename, "-")[[1]][1:2]
year <- as.integer(date_parts[1])
month <- as.integer(date_parts[2])
# Create date object for the given date
date <- ymd(paste(year, month, "01", sep = "-"))
# Calculate the one-year-ago and one-month-ago dates using lubridate
one_year_ago <- date - years(1)
one_month_ago <- date - months(1)
# Format the dates as strings
date_str <- format(date, "%Y-%m")
one_year_ago_str <- format(one_year_ago, "%Y-%m")
one_month_ago_str <- format(one_month_ago, "%Y-%m")
column_names <- c("sector", "province", one_year_ago_str, date_str, one_month_ago_str)
colnames(df) <- column_names
return(df)
}
data_getter <- function(url) {
headers <- c(
"accept" = "*/*",
"accept-language" = "de,en-US;q=0.9,en-GB;q=0.8,en;q=0.7",
"sec-ch-ua" = "\"Not/A)Brand\";v=\"99\", \"Opera\";v=\"101\", \"Chromium\";v=\"115\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "no-cors",
"sec-fetch-site" = "cross-site"
)
response <- httr::GET(url, headers = headers)
excel_data <- httr::content(response, as = "raw")
return(readxl::read_excel(excel_data))
}
data_prep <- function(url) {
name <- sub("\\?.*", "", tail(strsplit(url, "/", fixed = TRUE)[[1]], n = 1))
return(cleaner(data_getter(url), name))
}
merger <- function(dataset, to_merge) {
dataset <- read.csv(dataset, sep = ";", encoding = "UTF-8")
merged_df <- dataset
for (i in 1:length(to_merge)) {
if (all(to_merge[[i]]$sector %in% dataset$sector)) {
merged_df <- merge(merged_df, to_merge[[i]], by = c("sector", "province"), all.x = TRUE)
} else {
cat("Sectors don't match\n")
}
}
columns_to_delete <- grep("(x|y)", names(merged_df), ignore.case = TRUE, value = TRUE)
merged_df <- merged_df[, !(names(merged_df) %in% columns_to_delete)]
merged_df[is.na(merged_df)] <- 0
dat_sec <- merged_df %>%
group_by(sector) %>%
summarise_if(is.numeric, sum) %>%
mutate(province = "TOPLAM")
dat_pro <- merged_df %>%
group_by(province) %>%
summarise_if(is.numeric, sum) %>%
mutate(sector = "TOPLAM")
dat_sec <- bind_rows(dat_sec, dat_pro)
merged_df <- merged_df %>%
select(-c(sector, province)) %>%
distinct() %>%
left_join(dat_sec, by = c("sector", "province")) %>%
relocate(sector, province, .before = 1)
write.csv(merged_df, "clean1.csv", row.names = FALSE, sep = ";", fileEncoding = "UTF-8")
}
urls <- c(
"https://tim.org.tr/files/downloads/rakamlar/2023/7/2023-07-iller-bazinda-sektor-rakamlari.xlsx?v=2",
"https://tim.org.tr/files/downloads/rakamlar/2023/6/2023-06-iller-bazinda-sektor-rakamlari.xlsx?v=2"
)
data_list <- lapply(urls, data_prep)
library(dplyr)
library(lubridate)
library(readxl)
cleaner <- function(df, filename) {
# Extract the desired columns
selected_columns <- c(1, 2, 6, 7, 9)
df <- df[, selected_columns]
df <- df[-c(1:3), ]
date_parts <- strsplit(filename, "-")[[1]][1:2]
year <- as.integer(date_parts[1])
month <- as.integer(date_parts[2])
# Create date object for the given date
date <- ymd(paste(year, month, "01", sep = "-"))
# Calculate the one-year-ago and one-month-ago dates using lubridate
one_year_ago <- date - years(1)
one_month_ago <- date - months(1)
# Format the dates as strings
date_str <- format(date, "%Y-%m")
one_year_ago_str <- format(one_year_ago, "%Y-%m")
one_month_ago_str <- format(one_month_ago, "%Y-%m")
column_names <- c("sector", "province", one_year_ago_str, date_str, one_month_ago_str)
colnames(df) <- column_names
return(df)
}
data_getter <- function(url) {
headers <- c(
"accept" = "*/*",
"accept-language" = "de,en-US;q=0.9,en-GB;q=0.8,en;q=0.7",
"sec-ch-ua" = "\"Not/A)Brand\";v=\"99\", \"Opera\";v=\"101\", \"Chromium\";v=\"115\"",
"sec-ch-ua-mobile" = "?0",
"sec-ch-ua-platform" = "\"Windows\"",
"sec-fetch-dest" = "empty",
"sec-fetch-mode" = "no-cors",
"sec-fetch-site" = "cross-site"
)
response <- httr::GET(url, headers = headers)
excel_data <- httr::content(response, as = "raw")
temp_excel_file <- tempfile(fileext = ".xlsx")
writeBin(excel_data, temp_excel_file)
return(readxl::read_excel(temp_excel_file))
}
data_prep <- function(url) {
name <- sub("\\?.*", "", tail(strsplit(url, "/", fixed = TRUE)[[1]], n = 1))
return(cleaner(data_getter(url), name))
}
merger <- function(dataset, to_merge) {
dataset <- read.csv(dataset, sep = ";", encoding = "UTF-8")
merged_df <- dataset
for (i in 1:length(to_merge)) {
if (all(to_merge[[i]]$sector %in% dataset$sector)) {
merged_df <- merge(merged_df, to_merge[[i]], by = c("sector", "province"), all.x = TRUE)
} else {
cat("Sectors don't match\n")
}
}
columns_to_delete <- grep("(x|y)", names(merged_df), ignore.case = TRUE, value = TRUE)
merged_df <- merged_df[, !(names(merged_df) %in% columns_to_delete)]
merged_df[is.na(merged_df)] <- 0
dat_sec <- merged_df %>%
group_by(sector) %>%
summarise_if(is.numeric, sum) %>%
mutate(province = "TOPLAM")
dat_pro <- merged_df %>%
group_by(province) %>%
summarise_if(is.numeric, sum) %>%
mutate(sector = "TOPLAM")
dat_sec <- bind_rows(dat_sec, dat_pro)
merged_df <- merged_df %>%
select(-c(sector, province)) %>%
distinct() %>%
left_join(dat_sec, by = c("sector", "province")) %>%
relocate(sector, province, .before = 1)
write.csv(merged_df, "clean1.csv", row.names = FALSE, sep = ";", fileEncoding = "UTF-8")
}
urls <- c(
"https://tim.org.tr/files/downloads/rakamlar/2023/7/2023-07-iller-bazinda-sektor-rakamlari.xlsx?v=2",
"https://tim.org.tr/files/downloads/rakamlar/2023/6/2023-06-iller-bazinda-sektor-rakamlari.xlsx?v=2"
)
data_list <- lapply(urls, data_prep)
merger("dataset.csv", data_list)
shiny::runApp()
runApp()
scale <- scale_x_continuous(breaks = dates[seq(1,length(dates),breaking)], labels = format(dates[seq(1,length(dates),breaking)], "%Y-%m"))
runApp()
shiny::runApp()
runApp()
runApp()
analysisUi <- {fluidPage(
tags$head(
tags$style(HTML("body {
}.well{padding:5px}
.shiny-input-container {margin:1px;padding:0px;
}.col-sm-6 {padding:0px;margin:0px}"))
),
titlePanel(lang$Ex_Nu),
sidebarLayout(
sidebarPanel(
width = 3,
column(
width = 6,
radioButtons(
"option_num",
lang$slctns,
choices = c(1, 2),
selected = "1",
inline = TRUE
)
),
column(
width = 6,
numericInput(
"digit",
lang$Si_Fi,
min = -3,
max = 10,
value = 3
)
),
selectInput("first_sector", lang$fi_se, choices = sector),
selectInput("first_pro",  lang$fi_pr, choices = province),
conditionalPanel(
condition = "input.option_num == 2",
selectInput("second_sector", lang$se_pr, choices = sector),
selectInput("second_pro", lang$se_se, choices = province, selected = province[2])
),
conditionalPanel(condition = "input.option_num == 1",
numericInput("comp_mean", lang$mean_comp, value = 0)),
radioButtons(
"wroller",
h3(lang$mov_avg),
choiceNames = c(lang$mov_none,lang$mov_mean,lang$mov_med,lang$mov_max),
choiceValues = c(0,"roll_mean","roll_med","roll_max"),
selected = "0"
),
uiOutput("k_input")
),
mainPanel(fluidRow(
plotOutput("distPlot"),
verbatimTextOutput("calculations"),
p(lang$main_desc),
))
))}
runApp()
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")
fromJSON(file = "lang.json")$tr
fromJSON(file = "lang.json")[1]
fromJSON(file = "lang.json")[0,]
fromJSON(file = "lang.json")[1:]
fromJSON(file = "lang.json")[1]
fromJSON(file = "lang.json")[1,:]
fromJSON(file = "lang.json")[1,,]
fromJSON(file = "lang.json")[1,]
fromJSON(file = "lang.json")[1]
fromJSON(file = "lang.json")[2]
fromJSON(file = "lang.json")[[1]]
fromJSON(file = "lang.json")[,]
fromJSON(file = "lang.json")[,0]
fromJSON(file = "lang.json")[,1]
fromJSON(file = "lang.json")[1]
fromJSON(file = "lang.json")[1]
fromJSON(file = "lang.json")[1][0]
fromJSON(file = "lang.json")[1][1]
fromJSON(file = "lang.json")[1][1][1]
fromJSON(file = "lang.json")[1,1]
fromJSON(file = "lang.json")[1,[1]]
fromJSON(file = "lang.json")[1][[1]]
fromJSON(file = "lang.json")[1][[[1]]
fromJSON(file = "lang.json")[1][[[1]]]
fromJSON(file = "lang.json")[1][[[0]]]
fromJSON(file = "lang.json")[1][[1]]
fromJSON(file = "lang.json")[1][[[1]]]
fromJSON(file = "lang.json")[1][[[1]]]
fromJSON(file = "lang.json")[2]
fromJSON(file = "lang.json")[:]
fromJSON(file = "lang.json")[1,2]
fromJSON(file = "lang.json")[1:length(fromJSON(file = "lang.json"))]
fromJSON(file = "lang.json")[1:length(fromJSON(file = "lang.json")),]
fromJSON(file = "lang.json")[1:length(fromJSON(file = "lang.json")),1]
c(fromJSON(file = "lang.json"))
fromJSON(file = "lang.json")$tr
available_langs<-c("Türkçe" = tr,"English"=en)
available_langs<-c("Türkçe" = "tr","English"="en")
lang <- fromJSON(file = "lang.json")[available_langs["Turkish"]]
lang
[available_langs["Turkish"]]
available_langs["Turkish"]
lang <- fromJSON(file = "lang.json")[available_langs["Türkçe"]]
lang
available_langs<-c("Türkçe" = "tr","English"="en")
lang <- fromJSON(file = "lang.json")[available_langs["English"]]
analysisUi <- {fluidPage(
tags$head(
tags$style(HTML("body {
}.well{padding:5px}
.shiny-input-container {margin:1px;padding:0px;
}.col-sm-6 {padding:0px;margin:0px}"))
),
titlePanel(lang$Ex_Nu),
sidebarLayout(
sidebarPanel(
width = 3,
column(
width = 6,
radioButtons(
"option_num",
lang$slctns,
choices = c(1, 2),
selected = "1",
inline = TRUE
)
),
column(
width = 6,
numericInput(
"digit",
lang$Si_Fi,
min = -3,
max = 10,
value = 3
)
),
selectInput("first_sector", lang$fi_se, choices = sector),
selectInput("first_pro",  lang$fi_pr, choices = province),
conditionalPanel(
condition = "input.option_num == 2",
selectInput("second_sector", lang$se_pr, choices = sector),
selectInput("second_pro", lang$se_se, choices = province, selected = province[2])
),
conditionalPanel(condition = "input.option_num == 1",
numericInput("comp_mean", lang$mean_comp, value = 0)),
radioButtons(
"wroller",
h3(lang$mov_avg),
choiceNames = c(lang$mov_none,lang$mov_mean,lang$mov_med,lang$mov_max),
choiceValues = c(0,"roll_mean","roll_med","roll_max"),
selected = "0"
),
uiOutput("k_input"),
selectInput("lang",lang$lang_selec, choices = avaiable_languages)
),
mainPanel(fluidRow(
plotOutput("distPlot"),
verbatimTextOutput("calculations"),
p(lang$main_desc),
))
))}
analysisUi <- {fluidPage(
tags$head(
tags$style(HTML("body {
}.well{padding:5px}
.shiny-input-container {margin:1px;padding:0px;
}.col-sm-6 {padding:0px;margin:0px}"))
),
titlePanel(lang$Ex_Nu),
sidebarLayout(
sidebarPanel(
width = 3,
column(
width = 6,
radioButtons(
"option_num",
lang$slctns,
choices = c(1, 2),
selected = "1",
inline = TRUE
)
),
column(
width = 6,
numericInput(
"digit",
lang$Si_Fi,
min = -3,
max = 10,
value = 3
)
),
selectInput("first_sector", lang$fi_se, choices = sector),
selectInput("first_pro",  lang$fi_pr, choices = province),
conditionalPanel(
condition = "input.option_num == 2",
selectInput("second_sector", lang$se_pr, choices = sector),
selectInput("second_pro", lang$se_se, choices = province, selected = province[2])
),
conditionalPanel(condition = "input.option_num == 1",
numericInput("comp_mean", lang$mean_comp, value = 0)),
radioButtons(
"wroller",
h3(lang$mov_avg),
choiceNames = c(lang$mov_none,lang$mov_mean,lang$mov_med,lang$mov_max),
choiceValues = c(0,"roll_mean","roll_med","roll_max"),
selected = "0"
),
uiOutput("k_input"),
selectInput("lang",lang$lang_selec, choices = avaiable_languages),
),
mainPanel(fluidRow(
plotOutput("distPlot"),
verbatimTextOutput("calculations"),
p(lang$main_desc),
))
))}
available_langs
available_langs.cols
available_langs.col
colnames(available_langs)
available_langs
names(available_langs)
runApp()
names(available_langs)
c(names(available_langs))
runApp()
runApp()
runApp()
available_langs
sector
c(available_langs)
c(names(available_langs))
runApp()
province
lang
lang
is.null(lang)
is.na(lang)
is.na(lang)
is.na(lang)
is.na(names(lang))
lang <- fromJSON(file = "lang.json")[available_langs["English"]]
lang <- fromJSON(file = "lang.json")[available_langs["English"]]
is.na(names(lang))
lang <- fromJSON(file = "lang.json")[available_langs["English"]]
is.na(names(lang))
is.na(lang)
lang
lang
[available_langs["English"]]
fromJSON(file = "lang.json")[available_langs["English"]]
fromJSON(file = "lang.json")[[available_langs["English"]]]
available_langs["English"]
available_langs["English"][1]
available_langs["English"][2]
available_langs["English"][1]
lang <- fromJSON(file = "lang.json")[[available_langs["English"]]]
available_langs<-c("Türkçe" = "tr","English"="en")
lang <- fromJSON(file = "lang.json")[[available_langs["English"]]]
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang
lang<-data[[available_langs["English"]]]
langs <- fromJSON(file = "lang.json")
lang<-data[[available_langs["English"]]]
library(jsonlite)
lang<-data[[available_langs["English"]]]
langs <- fromJSON(file = "lang.json")
lang<-data[[available_langs["English"]]]
available_langs <- c("Türkçe" = "tr", "English" = "en")
# Load the JSON data (replace "lang.json" with the actual path to your JSON file)
data <- fromJSON(file = "lang.json")
# Load the JSON data (replace "lang.json" with the actual path to your JSON file)
data <- fromJSON(file = "lang")
